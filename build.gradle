plugins {
    id 'eclipse'
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id "net.minecraftforge.gradle" version "6.0.25"
    id "org.spongepowered.mixin" version "0.7.+"
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

compileJava.options.compilerArgs.add '-parameters'

repositories {
    flatDir { dirs "libs" }
    maven { url "https://www.cursemaven.com" }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://repo.spongepowered.org/maven" }
    maven { url = "https://modmaven.dev/" } // Registrate
    /*
    exclusiveContent {
        forRepository {
            maven { url = "https://api.modrinth.com/maven" }
        }
        filter { includeGroup "maven.modrinth" }
    }
    maven { url = "https://repo.spongepowered.org/maven" }

     */
}

dependencies {
    // Forge
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Core library
    implementation fg.deobf("curse.maven:supermartijn642s-core-lib-454372:${core_library_file}")
    // Config library
    implementation fg.deobf("curse.maven:supermartijn642s-config-lib-438332:${config_library_file}")
    // Fusion
    implementation fg.deobf("curse.maven:fusion-854949:${fusion_file}")
    // Rechiseled
    implementation fg.deobf("curse.maven:rechiseled-558998:${rechiseled_file}")

    // Just Enough Items
    implementation fg.deobf("curse.maven:jei-238222:${just_enough_items_file}")

    // NukaCraft
    implementation fg.deobf("curse.maven:nukacraft-958467:${nukacraft_file}")
    implementation fg.deobf("curse.maven:azurelib-817423:${azure_file}")
    implementation fg.deobf("curse.maven:nukateams-gun-lib-998474:${ntgl_file}")
    implementation fg.deobf("curse.maven:framework-549225:${framework_file}")
    implementation fg.deobf("curse.maven:chassiscore-908954:${chassis_file}")
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

minecraft {
    mappings channel: "official", version: minecraft_version

    enableIdeaPrepareRuns = true

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

gradle.taskGraph.whenReady {
    tasks.genIntellijRuns.doLast {
        def configDir = it.getRunConfigurationsFolder().get().getAsFile()
        minecraft.runs.each {
            //noinspection GroovyAssignabilityCheck
            def configFile = new File(configDir, it.getUniqueFileName() + ".xml")
            if(configFile.exists()){
                def xml = new groovy.xml.XmlSlurper().parse(configFile)
                //noinspection GrUnresolvedAccess
                xml.configuration.@name = "Forge " + it.name.capitalize()
                configFile.withWriter { groovy.xml.XmlUtil.serialize(xml, it) }
            }
        }
    }
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description, core_library_version: core_library_version,
            config_library_version:config_library_version, fusion_version: fusion_version, rechiseled_version: rechiseled_version,
            nukacraft_version: nukacraft_version, azure_version: azure_version, ntgl_version: ntgl_version,
            chassis_version: chassis_version, framework_version: framework_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
